from aiogram import Bot, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.types import CallbackQuery
from app.keyboards.reply import main_menu
from app.db.functions import User, _, Awards
import requests

router = Router()


async def check_awards(user_id: int, bot: Bot):
    awards = await Awards.check_award(user_id)
    for award in awards:
        await bot.send_message(
            user_id,
            f"üéÅ<b> –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –∫–æ–ª-–≤–∞ –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö –≤ {award.count}!</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è: <i>{award.text}</i>\n\n"
            f" –ó–Ω–∞—á–æ–∫: {award.badge}\n"
            f" –ù–∞–≥—Ä–∞–¥–∞: {award.award}",
        )
        await User.add_balance(user_id, award.award)


@router.callback_query()
async def check_profile(c: CallbackQuery, bot: Bot):
    html = requests.get(f"https://t.me/{c.from_user.username}").text
    user = await User.get_data(c.from_user.id)

    if "—Ç–æ–º–∞—Ç" in html.lower():
        await User.confirm(c.from_user.id)
        await c.message.delete()
        kb = await main_menu()

        try:
            await check_awards(user.refer, bot)
            await bot.send_message(
                user.refer,
                f"üçÖ <a href='tg://user?id={c.from_user.id}'>{_(c.from_user.full_name)}</a> –∑–∞—Ä–∞–∂—ë–Ω(-–∞) –≤–∞–º–∏!",
                parse_mode="HTML"
            )
        except TelegramAPIError:
            pass

        return await bot.send_message(
            c.from_user.id,
            "üçÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!",
            reply_markup=kb
        )

    await c.answer("‚ùóÔ∏è –°–ª–æ–≤–∞ \"—Ç–æ–º–∞—Ç\" –Ω–µ—Ç –≤ –≤–∞—à–µ–º –æ–ø–∏—Å–∞–Ω–∏–∏, –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç username!")
